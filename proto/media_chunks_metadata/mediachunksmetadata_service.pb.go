// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/media_chunks_metadata/mediachunksmetadata_service.proto

package mediachunksmetadata_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MediaChunkInfoResponseRepeated struct {
	Data                 []*MediaChunkInfoResponse `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *MediaChunkInfoResponseRepeated) Reset()         { *m = MediaChunkInfoResponseRepeated{} }
func (m *MediaChunkInfoResponseRepeated) String() string { return proto.CompactTextString(m) }
func (*MediaChunkInfoResponseRepeated) ProtoMessage()    {}
func (*MediaChunkInfoResponseRepeated) Descriptor() ([]byte, []int) {
	return fileDescriptor_e38b2340a79cc317, []int{0}
}

func (m *MediaChunkInfoResponseRepeated) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MediaChunkInfoResponseRepeated.Unmarshal(m, b)
}
func (m *MediaChunkInfoResponseRepeated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MediaChunkInfoResponseRepeated.Marshal(b, m, deterministic)
}
func (m *MediaChunkInfoResponseRepeated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaChunkInfoResponseRepeated.Merge(m, src)
}
func (m *MediaChunkInfoResponseRepeated) XXX_Size() int {
	return xxx_messageInfo_MediaChunkInfoResponseRepeated.Size(m)
}
func (m *MediaChunkInfoResponseRepeated) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaChunkInfoResponseRepeated.DiscardUnknown(m)
}

var xxx_messageInfo_MediaChunkInfoResponseRepeated proto.InternalMessageInfo

func (m *MediaChunkInfoResponseRepeated) GetData() []*MediaChunkInfoResponse {
	if m != nil {
		return m.Data
	}
	return nil
}

type MediaChunkInfoResponse struct {
	MediaId              int32      `protobuf:"varint,1,opt,name=mediaId,proto3" json:"mediaId,omitempty"`
	Resolution           string     `protobuf:"bytes,2,opt,name=resolution,proto3" json:"resolution,omitempty"`
	Position             int32      `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	Id                   int32      `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Chunk                *ChunkInfo `protobuf:"bytes,5,opt,name=chunk,proto3" json:"chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MediaChunkInfoResponse) Reset()         { *m = MediaChunkInfoResponse{} }
func (m *MediaChunkInfoResponse) String() string { return proto.CompactTextString(m) }
func (*MediaChunkInfoResponse) ProtoMessage()    {}
func (*MediaChunkInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e38b2340a79cc317, []int{1}
}

func (m *MediaChunkInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MediaChunkInfoResponse.Unmarshal(m, b)
}
func (m *MediaChunkInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MediaChunkInfoResponse.Marshal(b, m, deterministic)
}
func (m *MediaChunkInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaChunkInfoResponse.Merge(m, src)
}
func (m *MediaChunkInfoResponse) XXX_Size() int {
	return xxx_messageInfo_MediaChunkInfoResponse.Size(m)
}
func (m *MediaChunkInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaChunkInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MediaChunkInfoResponse proto.InternalMessageInfo

func (m *MediaChunkInfoResponse) GetMediaId() int32 {
	if m != nil {
		return m.MediaId
	}
	return 0
}

func (m *MediaChunkInfoResponse) GetResolution() string {
	if m != nil {
		return m.Resolution
	}
	return ""
}

func (m *MediaChunkInfoResponse) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *MediaChunkInfoResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MediaChunkInfoResponse) GetChunk() *ChunkInfo {
	if m != nil {
		return m.Chunk
	}
	return nil
}

type ResolutionResponse struct {
	Resolutions          []string `protobuf:"bytes,1,rep,name=resolutions,proto3" json:"resolutions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResolutionResponse) Reset()         { *m = ResolutionResponse{} }
func (m *ResolutionResponse) String() string { return proto.CompactTextString(m) }
func (*ResolutionResponse) ProtoMessage()    {}
func (*ResolutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e38b2340a79cc317, []int{2}
}

func (m *ResolutionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResolutionResponse.Unmarshal(m, b)
}
func (m *ResolutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResolutionResponse.Marshal(b, m, deterministic)
}
func (m *ResolutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolutionResponse.Merge(m, src)
}
func (m *ResolutionResponse) XXX_Size() int {
	return xxx_messageInfo_ResolutionResponse.Size(m)
}
func (m *ResolutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResolutionResponse proto.InternalMessageInfo

func (m *ResolutionResponse) GetResolutions() []string {
	if m != nil {
		return m.Resolutions
	}
	return nil
}

type LinkMediaChunkResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 bool     `protobuf:"varint,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LinkMediaChunkResponse) Reset()         { *m = LinkMediaChunkResponse{} }
func (m *LinkMediaChunkResponse) String() string { return proto.CompactTextString(m) }
func (*LinkMediaChunkResponse) ProtoMessage()    {}
func (*LinkMediaChunkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e38b2340a79cc317, []int{3}
}

func (m *LinkMediaChunkResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LinkMediaChunkResponse.Unmarshal(m, b)
}
func (m *LinkMediaChunkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LinkMediaChunkResponse.Marshal(b, m, deterministic)
}
func (m *LinkMediaChunkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkMediaChunkResponse.Merge(m, src)
}
func (m *LinkMediaChunkResponse) XXX_Size() int {
	return xxx_messageInfo_LinkMediaChunkResponse.Size(m)
}
func (m *LinkMediaChunkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkMediaChunkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LinkMediaChunkResponse proto.InternalMessageInfo

func (m *LinkMediaChunkResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *LinkMediaChunkResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *LinkMediaChunkResponse) GetData() bool {
	if m != nil {
		return m.Data
	}
	return false
}

type ChunkInfo struct {
	AwsBucketName        string   `protobuf:"bytes,1,opt,name=awsBucketName,proto3" json:"awsBucketName,omitempty"`
	AwsStorageName       string   `protobuf:"bytes,2,opt,name=awsStorageName,proto3" json:"awsStorageName,omitempty"`
	Length               float64  `protobuf:"fixed64,3,opt,name=length,proto3" json:"length,omitempty"`
	ChunkId              int32    `protobuf:"varint,4,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	CreatedAt            int64    `protobuf:"varint,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChunkInfo) Reset()         { *m = ChunkInfo{} }
func (m *ChunkInfo) String() string { return proto.CompactTextString(m) }
func (*ChunkInfo) ProtoMessage()    {}
func (*ChunkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e38b2340a79cc317, []int{4}
}

func (m *ChunkInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChunkInfo.Unmarshal(m, b)
}
func (m *ChunkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChunkInfo.Marshal(b, m, deterministic)
}
func (m *ChunkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkInfo.Merge(m, src)
}
func (m *ChunkInfo) XXX_Size() int {
	return xxx_messageInfo_ChunkInfo.Size(m)
}
func (m *ChunkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkInfo proto.InternalMessageInfo

func (m *ChunkInfo) GetAwsBucketName() string {
	if m != nil {
		return m.AwsBucketName
	}
	return ""
}

func (m *ChunkInfo) GetAwsStorageName() string {
	if m != nil {
		return m.AwsStorageName
	}
	return ""
}

func (m *ChunkInfo) GetLength() float64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *ChunkInfo) GetChunkId() int32 {
	if m != nil {
		return m.ChunkId
	}
	return 0
}

func (m *ChunkInfo) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type NewMediaChunkRequest struct {
	AwsBucketName        string   `protobuf:"bytes,1,opt,name=awsBucketName,proto3" json:"awsBucketName,omitempty"`
	AwsStorageName       string   `protobuf:"bytes,2,opt,name=awsStorageName,proto3" json:"awsStorageName,omitempty"`
	Length               float64  `protobuf:"fixed64,3,opt,name=length,proto3" json:"length,omitempty"`
	MediaId              int32    `protobuf:"varint,4,opt,name=mediaId,proto3" json:"mediaId,omitempty"`
	Resolution           string   `protobuf:"bytes,5,opt,name=resolution,proto3" json:"resolution,omitempty"`
	Position             int32    `protobuf:"varint,6,opt,name=position,proto3" json:"position,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewMediaChunkRequest) Reset()         { *m = NewMediaChunkRequest{} }
func (m *NewMediaChunkRequest) String() string { return proto.CompactTextString(m) }
func (*NewMediaChunkRequest) ProtoMessage()    {}
func (*NewMediaChunkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e38b2340a79cc317, []int{5}
}

func (m *NewMediaChunkRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewMediaChunkRequest.Unmarshal(m, b)
}
func (m *NewMediaChunkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewMediaChunkRequest.Marshal(b, m, deterministic)
}
func (m *NewMediaChunkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewMediaChunkRequest.Merge(m, src)
}
func (m *NewMediaChunkRequest) XXX_Size() int {
	return xxx_messageInfo_NewMediaChunkRequest.Size(m)
}
func (m *NewMediaChunkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewMediaChunkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewMediaChunkRequest proto.InternalMessageInfo

func (m *NewMediaChunkRequest) GetAwsBucketName() string {
	if m != nil {
		return m.AwsBucketName
	}
	return ""
}

func (m *NewMediaChunkRequest) GetAwsStorageName() string {
	if m != nil {
		return m.AwsStorageName
	}
	return ""
}

func (m *NewMediaChunkRequest) GetLength() float64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *NewMediaChunkRequest) GetMediaId() int32 {
	if m != nil {
		return m.MediaId
	}
	return 0
}

func (m *NewMediaChunkRequest) GetResolution() string {
	if m != nil {
		return m.Resolution
	}
	return ""
}

func (m *NewMediaChunkRequest) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

type MediaChunkResolutionRequest struct {
	Resolution           string   `protobuf:"bytes,1,opt,name=resolution,proto3" json:"resolution,omitempty"`
	MediaId              int32    `protobuf:"varint,2,opt,name=mediaId,proto3" json:"mediaId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MediaChunkResolutionRequest) Reset()         { *m = MediaChunkResolutionRequest{} }
func (m *MediaChunkResolutionRequest) String() string { return proto.CompactTextString(m) }
func (*MediaChunkResolutionRequest) ProtoMessage()    {}
func (*MediaChunkResolutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e38b2340a79cc317, []int{6}
}

func (m *MediaChunkResolutionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MediaChunkResolutionRequest.Unmarshal(m, b)
}
func (m *MediaChunkResolutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MediaChunkResolutionRequest.Marshal(b, m, deterministic)
}
func (m *MediaChunkResolutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaChunkResolutionRequest.Merge(m, src)
}
func (m *MediaChunkResolutionRequest) XXX_Size() int {
	return xxx_messageInfo_MediaChunkResolutionRequest.Size(m)
}
func (m *MediaChunkResolutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaChunkResolutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MediaChunkResolutionRequest proto.InternalMessageInfo

func (m *MediaChunkResolutionRequest) GetResolution() string {
	if m != nil {
		return m.Resolution
	}
	return ""
}

func (m *MediaChunkResolutionRequest) GetMediaId() int32 {
	if m != nil {
		return m.MediaId
	}
	return 0
}

type LinkMediaWithChunkRequest struct {
	MediaId              int32    `protobuf:"varint,1,opt,name=mediaId,proto3" json:"mediaId,omitempty"`
	Position             int32    `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	Resolution           string   `protobuf:"bytes,3,opt,name=resolution,proto3" json:"resolution,omitempty"`
	ChunkId              int32    `protobuf:"varint,4,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LinkMediaWithChunkRequest) Reset()         { *m = LinkMediaWithChunkRequest{} }
func (m *LinkMediaWithChunkRequest) String() string { return proto.CompactTextString(m) }
func (*LinkMediaWithChunkRequest) ProtoMessage()    {}
func (*LinkMediaWithChunkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e38b2340a79cc317, []int{7}
}

func (m *LinkMediaWithChunkRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LinkMediaWithChunkRequest.Unmarshal(m, b)
}
func (m *LinkMediaWithChunkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LinkMediaWithChunkRequest.Marshal(b, m, deterministic)
}
func (m *LinkMediaWithChunkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkMediaWithChunkRequest.Merge(m, src)
}
func (m *LinkMediaWithChunkRequest) XXX_Size() int {
	return xxx_messageInfo_LinkMediaWithChunkRequest.Size(m)
}
func (m *LinkMediaWithChunkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkMediaWithChunkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LinkMediaWithChunkRequest proto.InternalMessageInfo

func (m *LinkMediaWithChunkRequest) GetMediaId() int32 {
	if m != nil {
		return m.MediaId
	}
	return 0
}

func (m *LinkMediaWithChunkRequest) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *LinkMediaWithChunkRequest) GetResolution() string {
	if m != nil {
		return m.Resolution
	}
	return ""
}

func (m *LinkMediaWithChunkRequest) GetChunkId() int32 {
	if m != nil {
		return m.ChunkId
	}
	return 0
}

type GetMediaChunkInfoRequest struct {
	ChunkId              int32    `protobuf:"varint,1,opt,name=chunkId,proto3" json:"chunkId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMediaChunkInfoRequest) Reset()         { *m = GetMediaChunkInfoRequest{} }
func (m *GetMediaChunkInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetMediaChunkInfoRequest) ProtoMessage()    {}
func (*GetMediaChunkInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e38b2340a79cc317, []int{8}
}

func (m *GetMediaChunkInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMediaChunkInfoRequest.Unmarshal(m, b)
}
func (m *GetMediaChunkInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMediaChunkInfoRequest.Marshal(b, m, deterministic)
}
func (m *GetMediaChunkInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMediaChunkInfoRequest.Merge(m, src)
}
func (m *GetMediaChunkInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetMediaChunkInfoRequest.Size(m)
}
func (m *GetMediaChunkInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMediaChunkInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMediaChunkInfoRequest proto.InternalMessageInfo

func (m *GetMediaChunkInfoRequest) GetChunkId() int32 {
	if m != nil {
		return m.ChunkId
	}
	return 0
}

func init() {
	proto.RegisterType((*MediaChunkInfoResponseRepeated)(nil), "MediaChunkInfoResponseRepeated")
	proto.RegisterType((*MediaChunkInfoResponse)(nil), "MediaChunkInfoResponse")
	proto.RegisterType((*ResolutionResponse)(nil), "ResolutionResponse")
	proto.RegisterType((*LinkMediaChunkResponse)(nil), "LinkMediaChunkResponse")
	proto.RegisterType((*ChunkInfo)(nil), "ChunkInfo")
	proto.RegisterType((*NewMediaChunkRequest)(nil), "NewMediaChunkRequest")
	proto.RegisterType((*MediaChunkResolutionRequest)(nil), "MediaChunkResolutionRequest")
	proto.RegisterType((*LinkMediaWithChunkRequest)(nil), "LinkMediaWithChunkRequest")
	proto.RegisterType((*GetMediaChunkInfoRequest)(nil), "GetMediaChunkInfoRequest")
}

func init() {
	proto.RegisterFile("proto/media_chunks_metadata/mediachunksmetadata_service.proto", fileDescriptor_e38b2340a79cc317)
}

var fileDescriptor_e38b2340a79cc317 = []byte{
	// 593 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcd, 0x8e, 0xd3, 0x3c,
	0x14, 0xad, 0xfb, 0xf7, 0x4d, 0x6f, 0xd5, 0x91, 0x3e, 0x03, 0x6d, 0x26, 0x33, 0x1a, 0x22, 0x0b,
	0xa1, 0x4a, 0x48, 0xae, 0x54, 0x10, 0x2b, 0x58, 0xcc, 0x20, 0x04, 0x15, 0x74, 0x16, 0x61, 0x31,
	0x0b, 0x24, 0x2a, 0xb7, 0xf1, 0xa4, 0x51, 0xd3, 0x24, 0xc4, 0xce, 0x54, 0x3c, 0x03, 0x3c, 0x04,
	0x5b, 0x5e, 0x87, 0x27, 0x42, 0x71, 0xfe, 0xfb, 0x27, 0x56, 0x2c, 0xef, 0xb1, 0xef, 0xf5, 0xb9,
	0xe7, 0x1e, 0x5f, 0x78, 0x1d, 0x84, 0xbe, 0xf4, 0x47, 0x6b, 0x6e, 0x39, 0x6c, 0xb6, 0x58, 0x46,
	0xde, 0x4a, 0xcc, 0xd6, 0x5c, 0x32, 0x8b, 0x49, 0x96, 0xa0, 0x09, 0x98, 0x61, 0x33, 0xc1, 0xc3,
	0x7b, 0x67, 0xc1, 0xa9, 0xca, 0xd3, 0xcf, 0x6d, 0xdf, 0xb7, 0x5d, 0x3e, 0x52, 0xd1, 0x3c, 0xba,
	0x1b, 0xf1, 0x75, 0x20, 0xbf, 0x25, 0x87, 0x64, 0x0a, 0x97, 0xd3, 0xb8, 0xc2, 0x9b, 0xb8, 0xc2,
	0xc4, 0xbb, 0xf3, 0x4d, 0x2e, 0x02, 0xdf, 0x13, 0xdc, 0xe4, 0x01, 0x67, 0x92, 0x5b, 0xf8, 0x19,
	0x34, 0xe3, 0xa2, 0x1a, 0x32, 0x1a, 0xc3, 0xee, 0x78, 0x40, 0x0f, 0x5c, 0x57, 0x97, 0xc8, 0x4f,
	0x04, 0xfd, 0xfd, 0x17, 0xb0, 0x06, 0xff, 0x29, 0xae, 0x13, 0x4b, 0x43, 0x06, 0x1a, 0xb6, 0xcc,
	0x2c, 0xc4, 0x97, 0x00, 0x21, 0x17, 0xbe, 0x1b, 0x49, 0xc7, 0xf7, 0xb4, 0xba, 0x81, 0x86, 0x1d,
	0xb3, 0x84, 0x60, 0x1d, 0x4e, 0x02, 0x5f, 0x38, 0xea, 0xb4, 0xa1, 0x52, 0xf3, 0x18, 0x9f, 0x42,
	0xdd, 0xb1, 0xb4, 0xa6, 0x42, 0xeb, 0x8e, 0x85, 0x0d, 0x68, 0x29, 0x31, 0xb4, 0x96, 0x81, 0x86,
	0xdd, 0x31, 0xd0, 0x82, 0x48, 0x72, 0x40, 0x5e, 0x02, 0x36, 0xf3, 0xda, 0x39, 0x3b, 0x03, 0xba,
	0xc5, 0x8b, 0x42, 0x35, 0xdb, 0x31, 0xcb, 0x10, 0xf9, 0x02, 0xfd, 0x8f, 0x8e, 0xb7, 0x2a, 0xba,
	0xcb, 0x73, 0xfb, 0xd0, 0x16, 0x92, 0xc9, 0x48, 0xa4, 0x8d, 0xa5, 0x51, 0xd2, 0xb1, 0x10, 0xcc,
	0xe6, 0x69, 0x53, 0x59, 0x88, 0x71, 0xaa, 0x69, 0xdc, 0xcd, 0x49, 0x2a, 0xdd, 0x2f, 0x04, 0x9d,
	0x9c, 0x2c, 0x7e, 0x02, 0x3d, 0xb6, 0x11, 0xd7, 0xd1, 0x62, 0xc5, 0xe5, 0x0d, 0x5b, 0x73, 0x55,
	0xba, 0x63, 0x56, 0x41, 0xfc, 0x14, 0x4e, 0xd9, 0x46, 0x7c, 0x92, 0x7e, 0xc8, 0x6c, 0xae, 0xae,
	0x25, 0x0f, 0x6d, 0xa1, 0x31, 0x43, 0x97, 0x7b, 0xb6, 0x5c, 0xaa, 0x17, 0x91, 0x99, 0x46, 0x31,
	0x43, 0x25, 0xca, 0x24, 0x93, 0x30, 0x0b, 0xf1, 0x05, 0x74, 0x16, 0xa1, 0x32, 0xc0, 0x95, 0x54,
	0x5a, 0x36, 0xcc, 0x02, 0x20, 0xbf, 0x11, 0x3c, 0xbc, 0xe1, 0x9b, 0xb2, 0x16, 0x5f, 0x23, 0x2e,
	0xe4, 0xbf, 0xa3, 0x9d, 0x59, 0xa9, 0x79, 0xcc, 0x4a, 0xad, 0xa3, 0x56, 0x6a, 0x57, 0xad, 0x44,
	0x6e, 0xe1, 0xbc, 0x32, 0xdc, 0xdc, 0x22, 0x49, 0x6b, 0xd5, 0xd2, 0x68, 0xa7, 0x74, 0x89, 0x54,
	0xbd, 0x42, 0x8a, 0x7c, 0x47, 0x70, 0x96, 0x5b, 0xe7, 0xd6, 0x91, 0xcb, 0x8a, 0x64, 0x87, 0xff,
	0x45, 0x99, 0x6c, 0x7d, 0xcb, 0xf7, 0x55, 0x36, 0x8d, 0x7d, 0x6c, 0xf6, 0x4f, 0x96, 0xbc, 0x00,
	0xed, 0x1d, 0x97, 0xdb, 0x9f, 0x34, 0xe7, 0x92, 0x65, 0xa1, 0x4a, 0xd6, 0xf8, 0x47, 0x03, 0x7a,
	0x2a, 0x67, 0x9a, 0x2e, 0x19, 0x3c, 0x81, 0x9e, 0x57, 0xb6, 0x00, 0x7e, 0x44, 0xf7, 0x59, 0x42,
	0x7f, 0x4c, 0x8f, 0x2f, 0x18, 0x52, 0xc3, 0x1f, 0x00, 0xbb, 0x3b, 0xfa, 0x60, 0x9d, 0x1e, 0x14,
	0x4d, 0x1f, 0xd0, 0xfd, 0x7f, 0x91, 0xd4, 0xf0, 0x67, 0xd0, 0xec, 0x72, 0x7f, 0xa2, 0x18, 0x25,
	0xbe, 0xa0, 0x47, 0x26, 0xfc, 0x37, 0x4c, 0xdf, 0xc3, 0xc0, 0xe6, 0xf2, 0xea, 0x9e, 0x39, 0x2e,
	0x9b, 0xbb, 0xbc, 0xa8, 0x21, 0x70, 0x9f, 0x26, 0x7b, 0x96, 0x66, 0x7b, 0x96, 0xbe, 0x8d, 0xf7,
	0xac, 0xfe, 0x80, 0xee, 0xae, 0x1b, 0x52, 0xc3, 0xaf, 0xe0, 0x7f, 0x7b, 0x7b, 0x0c, 0xf8, 0x8c,
	0x1e, 0x1a, 0x8d, 0x5e, 0xda, 0x64, 0xa4, 0x76, 0xdd, 0x86, 0xa6, 0x1d, 0x06, 0x8b, 0x79, 0x5b,
	0x3d, 0xf6, 0xfc, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x33, 0xf7, 0xef, 0xc0, 0x23, 0x06, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MediaMetadataClient is the client API for MediaMetadata service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MediaMetadataClient interface {
	NewMediaChunk(ctx context.Context, in *NewMediaChunkRequest, opts ...grpc.CallOption) (*MediaChunkInfoResponseRepeated, error)
	LinkMediaWithChunk(ctx context.Context, in *LinkMediaWithChunkRequest, opts ...grpc.CallOption) (*LinkMediaChunkResponse, error)
	GetMediaChunksResolution(ctx context.Context, in *MediaChunkResolutionRequest, opts ...grpc.CallOption) (*MediaChunkInfoResponseRepeated, error)
	GetAvailableResolutions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ResolutionResponse, error)
	GetMediaChunkInfo(ctx context.Context, in *GetMediaChunkInfoRequest, opts ...grpc.CallOption) (*ChunkInfo, error)
}

type mediaMetadataClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaMetadataClient(cc grpc.ClientConnInterface) MediaMetadataClient {
	return &mediaMetadataClient{cc}
}

func (c *mediaMetadataClient) NewMediaChunk(ctx context.Context, in *NewMediaChunkRequest, opts ...grpc.CallOption) (*MediaChunkInfoResponseRepeated, error) {
	out := new(MediaChunkInfoResponseRepeated)
	err := c.cc.Invoke(ctx, "/MediaMetadata/newMediaChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaMetadataClient) LinkMediaWithChunk(ctx context.Context, in *LinkMediaWithChunkRequest, opts ...grpc.CallOption) (*LinkMediaChunkResponse, error) {
	out := new(LinkMediaChunkResponse)
	err := c.cc.Invoke(ctx, "/MediaMetadata/linkMediaWithChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaMetadataClient) GetMediaChunksResolution(ctx context.Context, in *MediaChunkResolutionRequest, opts ...grpc.CallOption) (*MediaChunkInfoResponseRepeated, error) {
	out := new(MediaChunkInfoResponseRepeated)
	err := c.cc.Invoke(ctx, "/MediaMetadata/getMediaChunksResolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaMetadataClient) GetAvailableResolutions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ResolutionResponse, error) {
	out := new(ResolutionResponse)
	err := c.cc.Invoke(ctx, "/MediaMetadata/getAvailableResolutions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaMetadataClient) GetMediaChunkInfo(ctx context.Context, in *GetMediaChunkInfoRequest, opts ...grpc.CallOption) (*ChunkInfo, error) {
	out := new(ChunkInfo)
	err := c.cc.Invoke(ctx, "/MediaMetadata/getMediaChunkInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaMetadataServer is the server API for MediaMetadata service.
type MediaMetadataServer interface {
	NewMediaChunk(context.Context, *NewMediaChunkRequest) (*MediaChunkInfoResponseRepeated, error)
	LinkMediaWithChunk(context.Context, *LinkMediaWithChunkRequest) (*LinkMediaChunkResponse, error)
	GetMediaChunksResolution(context.Context, *MediaChunkResolutionRequest) (*MediaChunkInfoResponseRepeated, error)
	GetAvailableResolutions(context.Context, *empty.Empty) (*ResolutionResponse, error)
	GetMediaChunkInfo(context.Context, *GetMediaChunkInfoRequest) (*ChunkInfo, error)
}

// UnimplementedMediaMetadataServer can be embedded to have forward compatible implementations.
type UnimplementedMediaMetadataServer struct {
}

func (*UnimplementedMediaMetadataServer) NewMediaChunk(ctx context.Context, req *NewMediaChunkRequest) (*MediaChunkInfoResponseRepeated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewMediaChunk not implemented")
}
func (*UnimplementedMediaMetadataServer) LinkMediaWithChunk(ctx context.Context, req *LinkMediaWithChunkRequest) (*LinkMediaChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkMediaWithChunk not implemented")
}
func (*UnimplementedMediaMetadataServer) GetMediaChunksResolution(ctx context.Context, req *MediaChunkResolutionRequest) (*MediaChunkInfoResponseRepeated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediaChunksResolution not implemented")
}
func (*UnimplementedMediaMetadataServer) GetAvailableResolutions(ctx context.Context, req *empty.Empty) (*ResolutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableResolutions not implemented")
}
func (*UnimplementedMediaMetadataServer) GetMediaChunkInfo(ctx context.Context, req *GetMediaChunkInfoRequest) (*ChunkInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediaChunkInfo not implemented")
}

func RegisterMediaMetadataServer(s *grpc.Server, srv MediaMetadataServer) {
	s.RegisterService(&_MediaMetadata_serviceDesc, srv)
}

func _MediaMetadata_NewMediaChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMediaChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaMetadataServer).NewMediaChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MediaMetadata/NewMediaChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaMetadataServer).NewMediaChunk(ctx, req.(*NewMediaChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaMetadata_LinkMediaWithChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkMediaWithChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaMetadataServer).LinkMediaWithChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MediaMetadata/LinkMediaWithChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaMetadataServer).LinkMediaWithChunk(ctx, req.(*LinkMediaWithChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaMetadata_GetMediaChunksResolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaChunkResolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaMetadataServer).GetMediaChunksResolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MediaMetadata/GetMediaChunksResolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaMetadataServer).GetMediaChunksResolution(ctx, req.(*MediaChunkResolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaMetadata_GetAvailableResolutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaMetadataServer).GetAvailableResolutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MediaMetadata/GetAvailableResolutions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaMetadataServer).GetAvailableResolutions(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaMetadata_GetMediaChunkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMediaChunkInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaMetadataServer).GetMediaChunkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MediaMetadata/GetMediaChunkInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaMetadataServer).GetMediaChunkInfo(ctx, req.(*GetMediaChunkInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MediaMetadata_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MediaMetadata",
	HandlerType: (*MediaMetadataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "newMediaChunk",
			Handler:    _MediaMetadata_NewMediaChunk_Handler,
		},
		{
			MethodName: "linkMediaWithChunk",
			Handler:    _MediaMetadata_LinkMediaWithChunk_Handler,
		},
		{
			MethodName: "getMediaChunksResolution",
			Handler:    _MediaMetadata_GetMediaChunksResolution_Handler,
		},
		{
			MethodName: "getAvailableResolutions",
			Handler:    _MediaMetadata_GetAvailableResolutions_Handler,
		},
		{
			MethodName: "getMediaChunkInfo",
			Handler:    _MediaMetadata_GetMediaChunkInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/media_chunks_metadata/mediachunksmetadata_service.proto",
}
